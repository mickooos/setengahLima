import React, { useState } from "react";
import useSWR from "swr";
import axios from "axios";
import * as XLSX from "xlsx";
import { jsPDF } from "jspdf";
import "jspdf-autotable";
import { numberToRupiah } from "../../utils/number-to-rupiah";
import { formatDate } from "../../utils/format-date";

const fetcher = (url: string) => axios.get(url).then((res) => res.data);

const ReportPage: React.FC = () => {
  const [startDate, setStartDate] = useState<string>("");
  const [endDate, setEndDate] = useState<string>("");

  const { data, error } = useSWR("revenue", fetcher); // fetch all revenue data
  const { data: totalData, error: totalError } = useSWR(
    "revenue/total",
    fetcher
  ); // fetch total revenue data

  if (error || totalError) return <div>Error loading data</div>;
  if (!data || !totalData) return <div>Loading...</div>;

  // filter data by date range
  const filteredData = data.revenue.filter((item: any) => {
    const itemData = new Date(item.tanggalBuat);
    const start = startDate ? new Date(startDate) : null;
    const end = endDate ? new Date(endDate) : null;
    return (!start || itemData >= start) && (!end || itemData <= end);
  });

  // Export to excel
  const exportToExcel = () => {
    // formatted data for excel column
    const formattedData = filteredData.map((item: any) => ({
      ID: item.id,
      Income: numberToRupiah(item.income),
      Tanggal: formatDate(item.tanggalBuat),
    }));
    const worksheet = XLSX.utils.json_to_sheet(formattedData);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "Revenue Data");
    XLSX.writeFile(workbook, "setengahLima - Revenue Report.xlsx");
  };

  // export to PDF
  const exportToPDF = () => {
    const doc = new jsPDF();
    doc.setFontSize(16);
    doc.text("setengahLima - Revenue Report", 14, 20);

    doc.setFontSize(12);
    doc.text(
      `Total Revenue: ${numberToRupiah(totalData.totalRevenue)}`,
      14,
      30
    );

    (doc as any).autoTable({
      startY: 35,
      head: [["ID", "Date", "Income"]],
      body: filteredData.map((item: any) => [
        item.id,
        formatDate(item.tanggalBuat),
        numberToRupiah(item.income),
      ]),
      theme: "grid",
    });

    // Footer
    const pageHeight = doc.internal.pageSize.height;
    doc.setFontSize(10);
    doc.text(
      "Generated by SetengahLima | Contact: hello@setengahlima.com",
      14,
      pageHeight - 10
    );
    doc.save("setengahLima - Revenue Report.pdf");
  };

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-4">Revenue Reports</h1>

      <div className="text-lg font-semibold mb-4">
        Total Revenue : {numberToRupiah(totalData?.totalRevenue) ?? 0}
      </div>

      <div className="flex gap-4 mb-4">
        <button
          onClick={exportToExcel}
          className="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600"
        >
          Export to Excel
        </button>
        <button
          onClick={exportToPDF}
          className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600"
        >
          Export to PDF
        </button>
      </div>

      <div className="flex gap-4 mb-6">
        <input
          type="date"
          value={startDate}
          onChange={(e) => setStartDate(e.target.value)}
          className="border p-2 rounded-lg"
          placeholder="Start Date"
        />
        <input
          type="date"
          value={endDate}
          onChange={(e) => setEndDate(e.target.value)}
          className="border p-2 rounded-lg"
          placeholder="End Date"
        />
      </div>

      <div className="overflow-x-auto">
        <table className="min-w-full bg-white shadow rounded-lg">
          <thead>
            <tr>
              <th className="px-4 py-2 border-b-2 text-left">#</th>
              <th className="px-4 py-2 border-b-2 text-left">Date</th>
              <th className="px-4 py-2 border-b-2 text-left">Income</th>
            </tr>
          </thead>
          <tbody>
            {filteredData.map((item: any, index: number) => (
              <tr key={item.id}>
                <td className="px-4 py-2 border-b">{index + 1}</td>
                <td className="px-4 py-2 border-b">
                  {formatDate(item.tanggalBuat)}
                </td>
                <td className="px-4 py-2 border-b">
                  {numberToRupiah(item.income)}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default ReportPage;
